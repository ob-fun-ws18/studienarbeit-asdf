-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/studienarbeit-minesweeper#readme</a>
@package studienarbeit-minesweeper
@version 1.0.0.0


-- | Module for some library functions.
module Lib

-- | Returns a random number.
getRandomNumber :: Int -> Int -> Int

-- | Sets the value at the given index.
setIndex :: [a] -> Int -> a -> [a]

-- | Returns random mine coordinates.
getRandomMinePositions :: Int -> Int -> Int -> Int -> [(Int, Int)]

-- | Returns the surrounding positions.
getSurroundingPositions :: (Int, Int) -> Int -> Int -> [(Int, Int)]


-- | Module for the Board and all its components.
module Board
data Board
Board :: Int -> Int -> Int -> [Field] -> GameState -> Board
[width] :: Board -> Int
[height] :: Board -> Int
[numberOfMines] :: Board -> Int
[fields] :: Board -> [Field]
[gameState] :: Board -> GameState
data Field
Field :: FieldContent -> FieldState -> Field
[content] :: Field -> FieldContent
[state] :: Field -> FieldState
data FieldContent
Mine :: FieldContent
NoMine :: NeighbourCount -> FieldContent
data FieldState
Revealed :: FieldState
Hidden :: Bool -> FieldState
data NeighbourCount
Nil :: NeighbourCount
One :: NeighbourCount
Two :: NeighbourCount
Three :: NeighbourCount
Four :: NeighbourCount
Five :: NeighbourCount
Six :: NeighbourCount
Seven :: NeighbourCount
Eight :: NeighbourCount
data GameState
GameWon :: GameState
GameLost :: GameState
GameNotFinished :: GameState

-- | Create a new Board.
board :: Int -> Int -> Int -> Int -> Board

-- | Flags the field on the given coordinate.
flagField :: Board -> Int -> Int -> Board

-- | Calculates the number of mines surrounding the field at the given
--   coordinate and determines its content.
getFieldContent :: (Int, Int) -> [(Int, Int)] -> Int -> Int -> FieldContent

-- | Tells if a field that is being reveald is a mine and therefore the
--   loosing condtiion is met.
isGameLost :: Board -> Int -> Int -> Bool

-- | Reveals a field by index like checkedRevealField.
revealBoard :: Board -> Int -> Board

-- | Sets the state of the field on the board with the coordinates of x and
--   y to revealed.
revealField :: Board -> Int -> Int -> Board

-- | Tells if the board is solved and therefore the winning condition is
--   met.
isGameWon :: Board -> Bool

-- | Reveals a field and recursively reveals all nil fields and the first
--   non-nil field except mines. If the selected field is a mine the game
--   state will be changed to lost. If there are no more fields to reveal
--   but mines the game state will be changed to won. Else the game state
--   stays at not finished.
checkedRevealField :: Board -> Int -> Int -> Board

-- | Tries to reveal all given coordinates recursivly. If a field is not a
--   mine and also has the value Nil, then it will also recursively reveal
--   the neighbouring fields that are not diagonally located to this field.
revealRecursive :: Board -> [(Int, Int)] -> Board

-- | Returns the field on the given coordinate.
getFieldFromBoard :: Board -> Int -> Int -> Field

-- | Returns the coordinates that are above, below, left and right from the
--   given coordinate. Coordinates that are not within the boundary will be
--   filtered out.
getCrossNeighbourCellPositions :: Board -> Int -> Int -> [(Int, Int)]
instance GHC.Classes.Eq Board.Board
instance GHC.Classes.Eq Board.Field
instance GHC.Classes.Eq Board.FieldState
instance GHC.Show.Show Board.FieldState
instance GHC.Enum.Enum Board.NeighbourCount
instance GHC.Show.Show Board.Board
instance GHC.Show.Show Board.Field
instance GHC.Classes.Eq Board.GameState
instance GHC.Show.Show Board.GameState
instance GHC.Classes.Eq Board.FieldContent
instance GHC.Show.Show Board.FieldContent
instance GHC.Show.Show Board.NeighbourCount


-- | Module for the GUI.
module Gui

-- | Main entry point.
guiMain :: IO ()
